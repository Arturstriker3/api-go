# Build stage
FROM golang:1.24-alpine AS builder

# Add git and openssl for fetching dependencies and certificate generation
RUN apk add --no-cache git openssl

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the certificate generator with correct build tag
RUN CGO_ENABLED=0 GOOS=linux go build -tags generate_certs -o generate-certs ./scripts/generate-self-signed-certs.go

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -o main ./cmd/main.go

# Final stage
FROM alpine:latest

# Add ca-certificates for HTTPS and openssl for certificate operations
RUN apk --no-cache add ca-certificates openssl

WORKDIR /root/

# Copy the binaries from builder
COPY --from=builder /app/main .
COPY --from=builder /app/generate-certs .

# Copy user's environment file
COPY --from=builder /app/.env ./

# Create certificates directory
RUN mkdir -p certs

# Expose TCP/TLS and metrics ports
EXPOSE 9000 9091

# Create entrypoint script that generates certificates before starting the app
RUN echo '#!/bin/sh' > /root/entrypoint.sh && \
    echo 'echo "ðŸŸ¡ Generating TLS certificates for Docker..."' >> /root/entrypoint.sh && \
    echo './generate-certs' >> /root/entrypoint.sh && \
    echo 'echo "ðŸŸ¢ Starting GoMailer TLS server..."' >> /root/entrypoint.sh && \
    echo 'exec ./main' >> /root/entrypoint.sh && \
    chmod +x /root/entrypoint.sh

# Command to run the application with TLS
CMD ["./entrypoint.sh"] 